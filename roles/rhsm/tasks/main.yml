---

# Use a 'block' to ensure "become: True" for all tasks since
# all of these tasks require elevated privileges
- block:

  # Need to use the 'command' module for this task since the "redhat_subscription" module
  # won't do a full "clean" when using the "state: absent" option
  # - note the 'warn: False' set because of this situation
  - name: 'Unregister the system if already registered - if this is a force re-registration'
    command: "{{ item }}"
    args:
      warn: False
    with_items:
    - 'subscription-manager clean'
    - 'subscription-manager remove --all'
    when:
    - (rhsm_force_register|default('no'))|lower == 'yes'

  - name: 'Register system using Red Hat Subscription Manager'
    redhat_subscription:
      state: present
      username: "{{ rhsm_username }}"
      password: "{{ rhsm_password }}"
      pool: "{{ rhsm_pool }}"
      force_register: yes
      auto_attach: "no"
    retries: 5
    delay: 3
    register: result
    until: not result.failed

  - name: "Obtain currently enabled repos"
    shell: 'subscription-manager repos --list-enabled | sed -ne "s/^Repo ID:[^a-zA-Z0-9]*\(.*\)/\1/p"'
    register: enabled_repos

  # Build the list of repos to disable/enable before calling 'subscription-manager' as it's a very 
  # expensive command to run and hence better to call just once (especially with a long list of repos)
  - name: "Build command line for repos to disable"
    set_fact:
      repos_params: "{{ repos_params|default('') }} --disable={{ item }}"
    with_items: 
    - "{{ enabled_repos.stdout_lines | difference(rhsm_repos) }}"

  - name: "Build command line for repos to enable"
    set_fact:
      repos_params: "{{ repos_params|default('') }} --enable={{ item }}"
    with_items:
    - "{{ rhsm_repos | difference(enabled_repos.stdout_lines) }}"

  - name: "Run 'subscription-manager to disable/enable repos"
    command: "subscription-manager repos {{ repos_params }}"
    when:
    - repos_params is defined 
    - repos_params|trim != ''

  # End of outer block for "become: True"
  become: True
  # Conditional for new deploy or stack remove
  when: action == 'deploy'

- block:

  - name: 'Unregister system using Red Hat Subscription Manager'
    redhat_subscription:
      state: absent
      username: "{{ rhsm_username }}"
      password: "{{ rhsm_password }}"

  # End of outer block for "become: True"
  become: True
  # Conditional for new deploy or stack remove
  when: action == 'remove'